!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/stefano/utility/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/fff389b9/
$(EXE)	Makefile	/^$(EXE): $(OBJS) $/;"	t
$(OBJ)/%.o	Makefile	/^$(OBJ)\/%.o: $(SRC)\/%.cpp $(INC)$/;"	t
CXX	Makefile	/^CXX := g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS := -Wall -fPIC -O3 -std=c++11 # C++11$/;"	m
EXE	Makefile	/^EXE := test.exe$/;"	m
INC	Makefile	/^INC := include$/;"	m
OBJ	Makefile	/^OBJ := obj$/;"	m
OBJS	Makefile	/^OBJS := $(patsubst $(SRC)\/%.cpp, $(OBJ)\/%.o, $(SRCS))$/;"	m
SIZE	include/word.h	/^    static const size_t SIZE = 16;$/;"	m	class:Word	typeref:typename:const size_t
SRCS	Makefile	/^SRCS := $(wildcard $(SRC)\/*.cpp)$/;"	m
TIMER_H	include/timer.h	/^#define TIMER_H$/;"	d
Timer	include/timer.h	/^    Timer() {};$/;"	f	class:Timer
Timer	include/timer.h	/^    Timer(const std::string name) { set_name(name); }$/;"	f	class:Timer
Timer	include/timer.h	/^class Timer$/;"	c
WORD_H	include/word.h	/^#define WORD_H$/;"	d
Word	include/word.h	/^    Word() {}$/;"	f	class:Word
Word	include/word.h	/^    Word(const T &data) { _word = bitset_t(data); }  $/;"	f	class:Word
Word	include/word.h	/^class Word $/;"	c
_end	include/timer.h	/^    std::chrono::time_point<std::chrono::system_clock> _end;$/;"	m	class:Timer	typeref:typename:std::chrono::time_point<std::chrono::system_clock>
_name	include/timer.h	/^    std::string _name;$/;"	m	class:Timer	typeref:typename:std::string
_start	include/timer.h	/^    std::chrono::time_point<std::chrono::system_clock> _start;$/;"	m	class:Timer	typeref:typename:std::chrono::time_point<std::chrono::system_clock>
_word	include/word.h	/^    bitset_t _word;  $/;"	m	class:Word	typeref:typename:bitset_t
all	Makefile	/^all: $(EXE)$/;"	t
bitset_t	include/word.h	/^    typedef std::bitset<SIZE> bitset_t;$/;"	t	class:Word	typeref:typename:std::bitset<SIZE>
check_bit_range	include/word.h	/^    void check_bit_range(const size_t lsb, const size_t size) const$/;"	f	class:Word	typeref:typename:void
clean	Makefile	/^clean:$/;"	t
get_bitset	include/word.h	/^    bitset_t get_bitset() const { return _word; }$/;"	f	class:Word	typeref:typename:bitset_t
get_data	include/word.h	/^    T get_data(const size_t lsb, const size_t size, const float msb_value) const $/;"	f	class:Word	typeref:typename:T
get_elapsed_time_ms	include/timer.h	/^    double get_elapsed_time_ms() const { return get_elapsed_time_s() * 1e3; }$/;"	f	class:Timer	typeref:typename:double
get_elapsed_time_s	include/timer.h	/^    double get_elapsed_time_s() const$/;"	f	class:Timer	typeref:typename:double
get_elapsed_time_us	include/timer.h	/^    double get_elapsed_time_us() const { return get_elapsed_time_s() * 1e6; }$/;"	f	class:Timer	typeref:typename:double
get_lsb_value	include/word.h	/^    float get_lsb_value(const size_t size, const float msb_value) const$/;"	f	class:Word	typeref:typename:float
get_mask	include/word.h	/^    bitset_t get_mask(const size_t lsb, const size_t size) const$/;"	f	class:Word	typeref:typename:bitset_t
get_name	include/timer.h	/^    std::string get_name() const { return _name; }$/;"	f	class:Timer	typeref:typename:std::string
get_size	include/word.h	/^    size_t get_size() const { return SIZE; }$/;"	f	class:Word	typeref:typename:size_t
main	src/main.cpp	/^int main(int argc, char **argv)$/;"	f	typeref:typename:int
mil_t	include/word.h	/^    typedef unsigned int mil_t;$/;"	t	class:Word	typeref:typename:unsigned int
operator <<	include/timer.h	/^    friend std::ostream& operator<<(std::ostream& os, const Timer t) $/;"	f	typeref:typename:std::ostream &
operator <<	include/word.h	/^    friend std::ostream& operator<<(std::ostream& os, const Word w) $/;"	f	typeref:typename:std::ostream &
pow2	include/word.h	/^    unsigned int pow2(const size_t size) const { return (1 << size); }$/;"	f	class:Word	typeref:typename:unsigned int
put_data	include/word.h	/^    void put_data(const T &data, const size_t lsb, const size_t size, const float msb_value, con/;"	f	class:Word	typeref:typename:void
reset	include/timer.h	/^    void reset() { _start = _end = {}; }$/;"	f	class:Timer	typeref:typename:void
reset	include/word.h	/^    void reset() { _word.reset(); }$/;"	f	class:Word	typeref:typename:void
reverse_bits	include/word.h	/^    void reverse_bits(bitset_t &bits, const size_t lsb, const size_t size) const$/;"	f	class:Word	typeref:typename:void
reverse_bits	include/word.h	/^    void reverse_bits(const size_t lsb = 0, const size_t size = SIZE) { reverse_bits(_word, lsb,/;"	f	class:Word	typeref:typename:void
set_name	include/timer.h	/^    void set_name(const std::string name) { _name = name; }$/;"	f	class:Timer	typeref:typename:void
sleep_ms	include/timer.h	/^    static void sleep_ms(const unsigned int ms) { std::this_thread::sleep_for(std::chrono::milli/;"	f	class:Timer	typeref:typename:void
sleep_s	include/timer.h	/^    static void sleep_s(const unsigned int s) { std::this_thread::sleep_for(std::chrono::seconds/;"	f	class:Timer	typeref:typename:void
start	include/timer.h	/^    void start() { _start = std::chrono::system_clock::now(); }$/;"	f	class:Timer	typeref:typename:void
stop	include/timer.h	/^    void stop() { _end = std::chrono::system_clock::now(); }$/;"	f	class:Timer	typeref:typename:void
swap_bytes	include/word.h	/^    void swap_bytes() { _word = {__bswap_16(_word.to_ulong())}; }$/;"	f	class:Word	typeref:typename:void
to_int	include/word.h	/^    int to_int(mil_t mil, const size_t size, const bool is_signed) const$/;"	f	class:Word	typeref:typename:int
to_mil	include/word.h	/^    mil_t to_mil() const { return _word.to_ulong(); }$/;"	f	class:Word	typeref:typename:mil_t
to_mil	include/word.h	/^    mil_t to_mil(int value, const size_t size, const bool is_signed) const$/;"	f	class:Word	typeref:typename:mil_t
